<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CosmoTunes - Interstellar Music Experience</title>
    <meta name="description" content="Experience music with CosmoTunes. Upload tracks, add lyrics from text, PDFs, or Word files, and enjoy cosmic visuals.">
    <meta name="keywords" content="music player, audio visualizer, lyrics display, wave animation, playback speed">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;500;700;900&family=Rajdhani:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --primary: #22d3ee;
            --secondary: #9333ea;
            --accent: #ff007a;
            --dark: #0d1b2a;
            --darker: #0a1622;
            --light: #e0f7fa;
            --gradient-main: linear-gradient(135deg, #0d1b2a, #1b263b);
            --gradient-accent: linear-gradient(90deg, var(--primary), var(--accent));
            --gradient-button: linear-gradient(90deg, var(--primary), var(--secondary));
            --transition-standard: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }

        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { background: var(--gradient-main); font-family: 'Rajdhani', sans-serif; color: var(--light); overflow-x: hidden; min-height: 100vh; position: relative; }
        .container { max-width: 1200px; margin: 0 auto; padding: 2rem; position: relative; z-index: 10; }
        header { text-align: center; margin-bottom: 3rem; }
        .logo { font-family: 'Orbitron', sans-serif; font-size: 3.5rem; font-weight: 900; background: var(--gradient-accent); -webkit-background-clip: text; background-clip: text; color: transparent; margin-bottom: 1rem; text-shadow: 0 0 20px rgba(34, 211, 238, 0.4); position: relative; }
        .logo::after { content: ''; position: absolute; bottom: -10px; left: 50%; transform: translateX(-50%); width: 150px; height: 3px; background: var(--gradient-accent); border-radius: 3px; }
        .tagline { font-size: 1.2rem; opacity: 0.8; margin-top: 1.5rem; }
        .content-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 2rem; margin-top: 2rem; }
        @media (max-width: 992px) { .content-grid { grid-template-columns: 1fr; } }

        .controls-panel { background: rgba(11, 27, 42, 0.6); border-radius: 15px; padding: 2rem; backdrop-filter: blur(10px); border: 1px solid rgba(34, 211, 238, 0.2); box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3); display: flex; flex-direction: column; gap: 1.5rem; position: relative; overflow: hidden; }
        .controls-panel::before { content: ''; position: absolute; top: -50%; left: -50%; width: 200%; height: 200%; background: radial-gradient(circle at center, rgba(34, 211, 238, 0.1) 0%, rgba(34, 211, 238, 0) 70%); z-index: -1; animation: pulse 15s infinite linear; }
        @keyframes pulse { 0% { transform: scale(0.8); opacity: 0.3; } 50% { transform: scale(1.2); opacity: 0.5; } 100% { transform: scale(0.8); opacity: 0.3; } }
        .panel-header { display: flex; align-items: center; gap: 1rem; padding-bottom: 1rem; border-bottom: 1px solid rgba(34, 211, 238, 0.2); }
        .panel-icon { font-size: 1.5rem; color: var(--primary); }
        .panel-title { font-family: 'Orbitron', sans-serif; font-size: 1.5rem; font-weight: 700; }

        .upload-container { position: relative; overflow: hidden; border: 2px dashed rgba(34, 211, 238, 0.5); border-radius: 12px; padding: 1.5rem; text-align: center; cursor: pointer; transition: var(--transition-standard); }
        .upload-container:hover { border-color: var(--accent); transform: scale(1.02); box-shadow: 0 0 15px rgba(34, 211, 238, 0.3); }
        .upload-icon { font-size: 2.5rem; margin-bottom: 0.5rem; color: var(--primary); }
        .upload-text { font-size: 1.1rem; margin-bottom: 0.3rem; }
        .upload-subtext { font-size: 0.8rem; opacity: 0.7; }
        .file-input { position: absolute; top: 0; left: 0; width: 100%; height: 100%; opacity: 0; cursor: pointer; }

        .controls-group { display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; }
        .control-item { position: relative; }
        .control-label { display: block; margin-bottom: 0.5rem; font-weight: 600; font-size: 1rem; }
        .control-select, .control-textarea { width: 100%; background: rgba(255, 255, 255, 0.05); border: 1px solid rgba(34, 211, 238, 0.3); color: var(--light); padding: 0.75rem 1rem; border-radius: 8px; font-family: 'Rajdhani', sans-serif; font-size: 1rem; transition: var(--transition-standard); }
        .control-textarea { resize: vertical; min-height: 80px; }
        .control-select:focus, .control-textarea:focus { outline: none; border-color: var(--accent); box-shadow: 0 0 10px rgba(255, 0, 122, 0.3); }
        .select-arrow { position: absolute; right: 12px; bottom: 12px; pointer-events: none; color: var(--primary); }

        .buttons-group { display: flex; gap: 1rem; margin-top: 1rem; }
        .btn { padding: 0.75rem 1.5rem; border: none; border-radius: 8px; font-family: 'Orbitron', sans-serif; font-weight: 600; font-size: 1rem; cursor: pointer; transition: var(--transition-standard); display: flex; align-items: center; gap: 0.5rem; justify-content: center; flex: 1; }
        .btn-primary { background: var(--gradient-button); color: white; box-shadow: 0 4px 10px rgba(34, 211, 238, 0.3); }
        .btn-primary:hover:not(:disabled) { transform: translateY(-3px); box-shadow: 0 7px 15px rgba(34, 211, 238, 0.4); }
        .btn-secondary { background: rgba(255, 255, 255, 0.1); color: var(--light); border: 1px solid rgba(34, 211, 238, 0.3); }
        .btn-secondary:hover:not(:disabled) { background: rgba(255, 255, 255, 0.15); border-color: var(--primary); }
        .btn:disabled { opacity: 0.5; cursor: not-allowed; filter: grayscale(1); }

        .player-panel { background: rgba(11, 27, 42, 0.6); border-radius: 15px; backdrop-filter: blur(10px); border: 1px solid rgba(34, 211, 238, 0.2); box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3); display: flex; flex-direction: column; overflow: hidden; height: 100%; }
        .visualizer-container { position: relative; height: 150px; background: var(--darker); overflow: hidden; }
        .wave-container { position: absolute; bottom: 0; left: 0; width: 100%; height: 100%; display: flex; justify-content: space-between; align-items: flex-end; padding: 0 5%; }
        .wave-bar { width: 4px; height: 5%; background: var(--gradient-accent); border-radius: 2px; transition: height 0.2s ease; }
        .lyrics-display { flex: 1; padding: 1.5rem; overflow-y: auto; max-height: 500px; }
        .lyrics-content { line-height: 1.6; font-size: 1.1rem; white-space: pre-wrap; text-align: center; }
        .player-controls { display: flex; justify-content: space-between; padding: 1.5rem; border-top: 1px solid rgba(34, 211, 238, 0.2); gap: 1rem; }
        .player-btn { background: rgba(255, 255, 255, 0.1); border: none; width: 50px; height: 50px; border-radius: 50%; display: flex; align-items: center; justify-content: center; cursor: pointer; color: var(--light); transition: var(--transition-standard); }
        .player-btn:hover:not(:disabled) { background: rgba(255, 255, 255, 0.2); transform: scale(1.1); }
        .player-btn:disabled { opacity: 0.5; cursor: not-allowed; }
        .play-btn { background: var(--gradient-button); color: white; width: 60px; height: 60px; box-shadow: 0 4px 10px rgba(34, 211, 238, 0.3); }
        .progress-container { width: 100%; height: 5px; background: rgba(255, 255, 255, 0.1); border-radius: 2.5px; overflow: hidden; margin-top: 1rem; cursor: pointer; }
        .progress-bar { height: 100%; width: 0; background: var(--gradient-accent); border-radius: 2.5px; transition: width 0.1s linear; }
        .playlist { margin-top: 1rem; max-height: 150px; overflow-y: auto; }
        .playlist-item { padding: 0.5rem; background: rgba(255, 255, 255, 0.05); margin-bottom: 0.5rem; border-radius: 5px; cursor: pointer; display: flex; justify-content: space-between; align-items: center; transition: var(--transition-standard); }
        .playlist-item:hover { background: rgba(255, 255, 255, 0.1); }
        .playlist-item.active { background: var(--gradient-accent); color: white; }
        .remove-btn { background: none; border: none; color: var(--accent); cursor: pointer; font-size: 1rem; }

        .features-section { margin-top: 4rem; }
        .section-title { font-family: 'Orbitron', sans-serif; font-size: 2rem; margin-bottom: 2rem; text-align: center; color: var(--primary); position: relative; display: inline-block; left: 50%; transform: translateX(-50%); }
        .section-title::after { content: ''; position: absolute; bottom: -10px; left: 0; width: 100%; height: 2px; background: var(--gradient-accent); border-radius: 2px; }
        .features-grid { display: grid; grid-template-columns: repeat(3, 1fr); gap: 2rem; }
        @media (max-width: 992px) { .features-grid { grid-template-columns: repeat(2, 1fr); } }
        @media (max-width: 576px) { .features-grid { grid-template-columns: 1fr; } }
        .feature-card { background: rgba(11, 27, 42, 0.6); border-radius: 12px; padding: 1.5rem; backdrop-filter: blur(10px); border: 1px solid rgba(34, 211, 238, 0.2); transition: var(--transition-standard); }
        .feature-card:hover { transform: translateY(-5px); box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3); border-color: var(--primary); }
        .feature-icon { font-size: 2rem; color: var(--primary); margin-bottom: 1rem; }
        .feature-title { font-family: 'Rajdhani', sans-serif; font-size: 1.3rem; font-weight: 700; margin-bottom: 0.5rem; }
        .feature-desc { opacity: 0.8; line-height: 1.6; }

        .toast { position: fixed; bottom: 30px; right: 30px; background: var(--gradient-button); color: white; padding: 1rem 1.5rem; border-radius: 8px; box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3); display: flex; align-items: center; gap: 1rem; z-index: 100; transform: translateY(100px); opacity: 0; transition: transform 0.3s ease, opacity 0.3s ease; }
        .toast.show { transform: translateY(0); opacity: 1; }
        .toast-icon { font-size: 1.5rem; }
        .toast-content { display: flex; flex-direction: column; }
        .toast-title { font-weight: 700; font-size: 1.1rem; }
        .toast-message { font-size: 0.9rem; opacity: 0.9; }

        footer { text-align: center; padding: 2rem 0; margin-top: 3rem; opacity: 0.7; font-size: 0.9rem; }
        @media (max-width: 768px) { .logo { font-size: 2.5rem; } .content-grid { gap: 1.5rem; } .controls-group { grid-template-columns: 1fr; } }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1 class="logo">CosmoTunes</h1>
            <p class="tagline">Your interstellar music journey awaits.</p>
        </header>

        <main>
            <div class="content-grid">
                <!-- Controls Panel -->
                <div class="controls-panel">
                    <div class="panel-header">
                        <i class="panel-icon fas fa-cogs"></i>
                        <h2 class="panel-title">MISSION CONTROL</h2>
                    </div>

                    <div class="upload-container" id="audioUploadContainer">
                        <i class="upload-icon fas fa-music"></i>
                        <h3 class="upload-text">Drag & Drop MP3 or Click to Upload</h3>
                        <p class="upload-subtext">Max 5 tracks, 10MB each</p>
                        <input type="file" id="audioFiles" class="file-input" accept="audio/mpeg" multiple>
                    </div>

                    <div class="upload-container" id="lyricsUploadContainer">
                        <i class="upload-icon fas fa-file-alt"></i>
                        <h3 class="upload-text">Upload Lyrics (PDF/Word)</h3>
                        <p class="upload-subtext">Optional, max 5MB</p>
                        <input type="file" id="lyricsFile" class="file-input" accept=".pdf,.docx">
                    </div>

                    <div class="controls-group">
                        <div class="control-item">
                            <label class="control-label" for="waveSelect">Wave Animation</label>
                            <select id="waveSelect" class="control-select">
                                <option value="bars" selected>Bars</option>
                                <option value="pulse">Pulse</option>
                                <option value="wave">Wave</option>
                            </select>
                            <i class="select-arrow fas fa-chevron-down"></i>
                        </div>

                        <div class="control-item">
                            <label class="control-label" for="speedSelect">Playback Speed</label>
                            <select id="speedSelect" class="control-select">
                                <option value="0.5">Quantum Slow (0.5x)</option>
                                <option value="0.75">Sublight (0.75x)</option>
                                <option value="1" selected>Standard Orbit (1x)</option>
                                <option value="1.25">Hyper Speed (1.25x)</option>
                                <option value="1.5">Warp Drive (1.5x)</option>
                                <option value="2">Quantum Leap (2x)</option>
                            </select>
                            <i class="select-arrow fas fa-chevron-down"></i>
                        </div>
                    </div>

                    <div class="controls-group">
                        <div class="control-item">
                            <label class="control-label" for="lyricsInput">Manual Lyrics (Optional)</label>
                            <textarea id="lyricsInput" class="control-textarea" placeholder="Paste lyrics here..."></textarea>
                        </div>
                    </div>

                    <div class="buttons-group">
                        <button id="addTrackBtn" class="btn btn-primary" disabled>
                            <i class="fas fa-plus"></i> Add to Playlist
                        </button>
                        <button id="clearPlaylistBtn" class="btn btn-secondary" disabled>
                            <i class="fas fa-trash"></i> Clear Playlist
                        </button>
                    </div>

                    <div class="playlist" id="playlist"></div>
                </div>

                <!-- Player Panel -->
                <div class="player-panel">
                    <div class="visualizer-container">
                        <div class="wave-container" id="waveContainer"></div>
                    </div>

                    <div class="lyrics-display">
                        <div id="lyricsContent" class="lyrics-content">
                            Add some tracks to start your cosmic journey.
                        </div>
                    </div>

                    <div class="progress-container" id="progressContainer">
                        <div id="progressBar" class="progress-bar"></div>
                    </div>

                    <div class="player-controls">
                        <button id="prevBtn" class="player-btn" disabled>
                            <i class="fas fa-step-backward"></i>
                        </button>
                        <button id="rewindBtn" class="player-btn" disabled>
                            <i class="fas fa-backward"></i>
                        </button>
                        <button id="playBtn" class="player-btn play-btn" disabled>
                            <i class="fas fa-play"></i>
                        </button>
                        <button id="forwardBtn" class="player-btn" disabled>
                            <i class="fas fa-forward"></i>
                        </button>
                        <button id="nextBtn" class="player-btn" disabled>
                            <i class="fas fa-step-forward"></i>
                        </button>
                    </div>
                </div>
            </div>

            <!-- Features Section -->
            <section class="features-section">
                <h2 class="section-title">STELLAR FEATURES</h2>
                <div class="features-grid">
                    <div class="feature-card">
                        <i class="feature-icon fas fa-wave-square"></i>
                        <h3 class="feature-title">Dynamic Visualizers</h3>
                        <p class="feature-desc">Choose from multiple wave animations synced to your music’s rhythm.</p>
                    </div>
                    <div class="feature-card">
                        <i class="feature-icon fas fa-list-ul"></i>
                        <h3 class="feature-title">Playlist Management</h3>
                        <p class="feature-desc">Add up to 5 tracks and remove them as needed with ease.</p>
                    </div>
                    <div class="feature-card">
                        <i class="feature-icon fas fa-file-alt"></i>
                        <h3 class="feature-title">Lyrics Import</h3>
                        <p class="feature-desc">Upload lyrics from PDF or Word files, or paste them manually.</p>
                    </div>
                    <div class="feature-card">
                        <i class="feature-icon fas fa-tachometer-alt"></i>
                        <h3 class="feature-title">Speed Control</h3>
                        <p class="feature-desc">Adjust playback speed from 0.5x to 2x for a custom experience.</p>
                    </div>
                    <div class="feature-card">
                        <i class="feature-icon fas fa-random"></i>
                        <h3 class="feature-title">Shuffle Mode</h3>
                        <p class="feature-desc">Randomize your playlist for a surprise every time.</p>
                    </div>
                    <div class="feature-card">
                        <i class="feature-icon fas fa-cloud"></i>
                        <h3 class="feature-title">Cloud Sync</h3>
                        <p class="feature-desc">Save your playlist and progress across devices (coming soon).</p>
                    </div>
                </div>
            </section>
        </main>

        <footer>
            <p>© 2025 CosmoTunes. All rights reserved. | Your gateway to the musical cosmos.</p>
        </footer>
    </div>

    <!-- Toast Notification -->
    <div id="toast" class="toast">
        <div class="toast-icon">
            <i class="fas fa-check-circle"></i>
        </div>
        <div class="toast-content">
            <div id="toastTitle" class="toast-title">Success</div>
            <div id="toastMessage" class="toast-message">Operation completed successfully.</div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.4.120/pdf.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/docxtemplater/3.28.0/docxtemplater.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.7.1/jszip.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.4/gsap.min.js"></script>
    <script>
        pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.4.120/pdf.worker.min.js';

        // State management
        const audio = new Audio();
        let playlist = [];
        let currentTrack = 0;
        let isPlaying = false;
        let visualizerInterval = null;

        // DOM Elements
        const elements = {
            audioFiles: document.getElementById('audioFiles'),
            audioUploadContainer: document.getElementById('audioUploadContainer'),
            lyricsFile: document.getElementById('lyricsFile'),
            lyricsUploadContainer: document.getElementById('lyricsUploadContainer'),
            waveSelect: document.getElementById('waveSelect'),
            speedSelect: document.getElementById('speedSelect'),
            lyricsInput: document.getElementById('lyricsInput'),
            addTrackBtn: document.getElementById('addTrackBtn'),
            clearPlaylistBtn: document.getElementById('clearPlaylistBtn'),
            playBtn: document.getElementById('playBtn'),
            prevBtn: document.getElementById('prevBtn'),
            nextBtn: document.getElementById('nextBtn'),
            rewindBtn: document.getElementById('rewindBtn'),
            forwardBtn: document.getElementById('forwardBtn'),
            lyricsContent: document.getElementById('lyricsContent'),
            progressBar: document.getElementById('progressBar'),
            progressContainer: document.getElementById('progressContainer'),
            waveContainer: document.getElementById('waveContainer'),
            playlist: document.getElementById('playlist'),
            toast: document.getElementById('toast'),
            toastTitle: document.getElementById('toastTitle'),
            toastMessage: document.getElementById('toastMessage')
        };

        // Create wave bars for visualizer
        function createWaveBars(count = 50) {
            elements.waveContainer.innerHTML = '';
            for (let i = 0; i < count; i++) {
                const bar = document.createElement('div');
                bar.className = 'wave-bar';
                bar.style.height = '5%';
                elements.waveContainer.appendChild(bar);
            }
        }
        createWaveBars();

        // Visualizer animations
        function updateVisualizer() {
            const waveType = elements.waveSelect.value;
            const bars = elements.waveContainer.querySelectorAll('.wave-bar');
            if (!isPlaying) {
                bars.forEach(bar => bar.style.height = '5%');
                return;
            }

            switch (waveType) {
                case 'bars':
                    bars.forEach(bar => {
                        bar.style.height = `${Math.random() * 70 + 10}%`;
                    });
                    break;
                case 'pulse':
                    const pulseHeight = Math.sin(Date.now() / 200) * 40 + 50;
                    bars.forEach(bar => {
                        bar.style.height = `${pulseHeight}%`;
                    });
                    break;
                case 'wave':
                    bars.forEach((bar, i) => {
                        const waveHeight = Math.sin((Date.now() / 300) + (i * 0.5)) * 40 + 50;
                        bar.style.height = `${waveHeight}%`;
                    });
                    break;
            }
        }

        function startVisualizer() {
            if (visualizerInterval) clearInterval(visualizerInterval);
            visualizerInterval = setInterval(updateVisualizer, 100);
        }

        function stopVisualizer() {
            if (visualizerInterval) {
                clearInterval(visualizerInterval);
                visualizerInterval = null;
            }
            updateVisualizer();
        }

        // Extract lyrics from PDF
        async function extractLyricsFromPDF(file) {
            try {
                const arrayBuffer = await file.arrayBuffer();
                const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;
                let text = '';
                for (let i = 1; i <= pdf.numPages; i++) {
                    const page = await pdf.getPage(i);
                    const textContent = await page.getTextContent();
                    text += textContent.items.map(item => item.str).join(' ') + '\n';
                }
                return text.trim() || 'No lyrics extracted from PDF.';
            } catch (error) {
                console.error('PDF Extraction Error:', error);
                showToast('Error', 'Failed to extract lyrics from PDF.', 'error');
                return '';
            }
        }

        // Extract lyrics from Word (.docx)
        async function extractLyricsFromDocx(file) {
            try {
                const arrayBuffer = await file.arrayBuffer();
                const zip = await JSZip.loadAsync(arrayBuffer);
                const docXml = await zip.file('word/document.xml').async('string');
                const parser = new DOMParser();
                const doc = parser.parseFromString(docXml, 'application/xml');
                const paragraphs = doc.getElementsByTagName('w:t');
                let text = '';
                for (let p of paragraphs) {
                    text += (p.textContent || '') + '\n';
                }
                return text.trim() || 'No lyrics extracted from Word file.';
            } catch (error) {
                console.error('Docx Extraction Error:', error);
                showToast('Error', 'Failed to extract lyrics from Word file.', 'error');
                return '';
            }
        }

        // Add track to playlist
        async function addTrack(audioFiles) {
            if (!audioFiles.length) return;

            let lyrics = elements.lyricsInput.value.trim();
            const lyricsFile = elements.lyricsFile.files[0];

            if (lyricsFile) {
                if (lyricsFile.size > 5 * 1024 * 1024) {
                    showToast('File Too Large', 'Lyrics file must be under 5MB.', 'error');
                    return;
                }
                if (lyricsFile.type === 'application/pdf') {
                    lyrics = await extractLyricsFromPDF(lyricsFile);
                } else if (lyricsFile.type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') {
                    lyrics = await extractLyricsFromDocx(lyricsFile);
                } else {
                    showToast('Invalid File', 'Lyrics file must be PDF or Word (.docx).', 'error');
                    return;
                }
            }

            Array.from(audioFiles).forEach(file => {
                if (playlist.length >= 5) {
                    showToast('Limit Reached', 'Maximum 5 tracks allowed.', 'error');
                    return;
                }
                if (file.size > 10 * 1024 * 1024) {
                    showToast('File Too Large', 'Maximum file size is 10MB.', 'error');
                    return;
                }
                if (file.type !== 'audio/mpeg') {
                    showToast('Invalid File', 'Please select an MP3 file.', 'error');
                    return;
                }

                const url = URL.createObjectURL(file);
                playlist.push({ name: file.name, url, lyrics });
                updatePlaylistUI();
                showToast('Track Added', `${file.name} added to playlist.`, 'success');
            });

            if (playlist.length > 0) {
                [elements.playBtn, elements.prevBtn, elements.nextBtn, elements.rewindBtn, elements.forwardBtn, elements.clearPlaylistBtn]
                    .forEach(btn => btn.disabled = false);
            }
            elements.lyricsInput.value = '';
            elements.lyricsFile.value = '';
            elements.addTrackBtn.disabled = true;
        }

        // Update playlist UI
        function updatePlaylistUI() {
            elements.playlist.innerHTML = '';
            playlist.forEach((track, index) => {
                const item = document.createElement('div');
                item.className = `playlist-item ${index === currentTrack ? 'active' : ''}`;
                item.innerHTML = `
                    <span>${track.name.substring(0, 20)}${track.name.length > 20 ? '...' : ''}</span>
                    <button class="remove-btn" data-index="${index}"><i class="fas fa-times"></i></button>
                `;
                item.addEventListener('click', () => playTrack(index));
                item.querySelector('.remove-btn').addEventListener('click', (e) => {
                    e.stopPropagation();
                    removeTrack(index);
                });
                elements.playlist.appendChild(item);
            });
            if (playlist.length > 0) {
                elements.lyricsContent.textContent = playlist[currentTrack].lyrics || 'No lyrics available.';
            } else {
                elements.lyricsContent.textContent = 'Add some tracks to start your cosmic journey.';
            }
        }

        // Remove track
        function removeTrack(index) {
            playlist.splice(index, 1);
            if (currentTrack >= playlist.length) currentTrack = playlist.length - 1;
            if (currentTrack < 0) currentTrack = 0;
            updatePlaylistUI();
            if (isPlaying && playlist.length > 0) playTrack(currentTrack);
            else if (playlist.length === 0) resetPlayer();
            showToast('Track Removed', 'Track removed from playlist.', 'info');
        }

        // Play track
        function playTrack(index) {
            if (index < 0 || index >= playlist.length) return;
            currentTrack = index;
            audio.src = playlist[currentTrack].url;
            audio.playbackRate = parseFloat(elements.speedSelect.value) || 1;
            audio.load(); // Ensure the audio is reloaded
            audio.play().then(() => {
                isPlaying = true;
                elements.playBtn.innerHTML = '<i class="fas fa-pause"></i>';
                startVisualizer();
                updatePlaylistUI();
            }).catch(error => {
                console.error('Playback Error:', error);
                showToast('Playback Error', 'Unable to play the track.', 'error');
                resetPlayer();
            });
        }

        // Reset player
        function resetPlayer() {
            audio.pause();
            audio.currentTime = 0;
            isPlaying = false;
            elements.playBtn.innerHTML = '<i class="fas fa-play"></i>';
            stopVisualizer();
            elements.progressBar.style.width = '0%';
            elements.lyricsContent.textContent = 'Add some tracks to start your cosmic journey.';
            [elements.playBtn, elements.prevBtn, elements.nextBtn, elements.rewindBtn, elements.forwardBtn, elements.clearPlaylistBtn]
                .forEach(btn => btn.disabled = true);
        }

        // Show toast notification
        function showToast(title, message, type = 'success') {
            elements.toastTitle.textContent = title;
            elements.toastMessage.textContent = message;
            const icon = elements.toast.querySelector('.toast-icon i');
            icon.className = `fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle'}`;
            elements.toast.classList.add('show');
            setTimeout(() => elements.toast.classList.remove('show'), 3000);
        }

        // Event Listeners
        elements.audioFiles.addEventListener('change', (e) => {
            const files = e.target.files;
            if (!files.length) return;
            elements.addTrackBtn.disabled = false;
            elements.audioUploadContainer.querySelector('.upload-text').textContent = `${files.length} track(s) selected`;
        });

        elements.lyricsFile.addEventListener('change', (e) => {
            const file = e.target.files[0];
            if (!file) return;
            elements.lyricsUploadContainer.querySelector('.upload-text').textContent = file.name.substring(0, 20) + (file.name.length > 20 ? '...' : '');
        });

        elements.addTrackBtn.addEventListener('click', () => {
            const files = elements.audioFiles.files;
            if (files.length) addTrack(files);
            elements.audioFiles.value = '';
            elements.audioUploadContainer.querySelector('.upload-text').textContent = 'Drag & Drop MP3 or Click to Upload';
        });

        elements.clearPlaylistBtn.addEventListener('click', () => {
            playlist = [];
            currentTrack = 0;
            resetPlayer();
            updatePlaylistUI();
            showToast('Playlist Cleared', 'All tracks removed.', 'info');
        });

        elements.playBtn.addEventListener('click', () => {
            if (!playlist.length) return;
            if (isPlaying) {
                audio.pause();
                isPlaying = false;
                elements.playBtn.innerHTML = '<i class="fas fa-play"></i>';
                stopVisualizer();
            } else {
                if (audio.src) {
                    audio.play().then(() => {
                        isPlaying = true;
                        elements.playBtn.innerHTML = '<i class="fas fa-pause"></i>';
                        startVisualizer();
                    }).catch(error => {
                        console.error('Playback Error:', error);
                        showToast('Playback Error', 'Unable to resume track.', 'error');
                    });
                } else {
                    playTrack(currentTrack);
                }
            }
        });

        elements.prevBtn.addEventListener('click', () => {
            if (currentTrack > 0) playTrack(currentTrack - 1);
        });

        elements.nextBtn.addEventListener('click', () => {
            if (currentTrack < playlist.length - 1) playTrack(currentTrack + 1);
            else playTrack(0); // Loop to start
        });

        elements.rewindBtn.addEventListener('click', () => {
            audio.currentTime = Math.max(0, audio.currentTime - 10);
        });

        elements.forwardBtn.addEventListener('click', () => {
            audio.currentTime = Math.min(audio.duration, audio.currentTime + 10);
        });

        elements.speedSelect.addEventListener('change', () => {
            audio.playbackRate = parseFloat(elements.speedSelect.value) || 1;
        });

        elements.progressContainer.addEventListener('click', (e) => {
            const rect = elements.progressContainer.getBoundingClientRect();
            const pos = (e.clientX - rect.left) / rect.width;
            audio.currentTime = pos * audio.duration;
        });

        audio.addEventListener('timeupdate', () => {
            if (!audio.duration) return;
            const progress = (audio.currentTime / audio.duration) * 100;
            elements.progressBar.style.width = `${progress}%`;
        });

        audio.addEventListener('ended', () => {
            if (currentTrack < playlist.length - 1) playTrack(currentTrack + 1);
            else playTrack(0); // Loop playlist
        });

        elements.audioUploadContainer.addEventListener('drop', (e) => {
            e.preventDefault();
            elements.audioUploadContainer.style.borderColor = 'var(--primary)';
            elements.audioUploadContainer.style.transform = 'scale(1)';
            addTrack(e.dataTransfer.files);
        });

        elements.audioUploadContainer.addEventListener('dragover', (e) => {
            e.preventDefault();
            elements.audioUploadContainer.style.borderColor = 'var(--accent)';
            elements.audioUploadContainer.style.transform = 'scale(1.02)';
        });

        elements.audioUploadContainer.addEventListener('dragleave', () => {
            elements.audioUploadContainer.style.borderColor = 'rgba(34, 211, 238, 0.5)';
            elements.audioUploadContainer.style.transform = 'scale(1)';
        });

        elements.lyricsUploadContainer.addEventListener('drop', (e) => {
            e.preventDefault();
            elements.lyricsUploadContainer.style.borderColor = 'var(--primary)';
            elements.lyricsUploadContainer.style.transform = 'scale(1)';
            elements.lyricsFile.files = e.dataTransfer.files;
            const file = e.dataTransfer.files[0];
            if (file) {
                elements.lyricsUploadContainer.querySelector('.upload-text').textContent = file.name.substring(0, 20) + (file.name.length > 20 ? '...' : '');
            }
        });

        elements.lyricsUploadContainer.addEventListener('dragover', (e) => {
            e.preventDefault();
            elements.lyricsUploadContainer.style.borderColor = 'var(--accent)';
            elements.lyricsUploadContainer.style.transform = 'scale(1.02)';
        });

        elements.lyricsUploadContainer.addEventListener('dragleave', () => {
            elements.lyricsUploadContainer.style.borderColor = 'rgba(34, 211, 238, 0.5)';
            elements.lyricsUploadContainer.style.transform = 'scale(1)';
        });

        // GSAP Animations
        document.addEventListener('DOMContentLoaded', () => {
            gsap.from('.feature-card', { duration: 0.8, y: 50, opacity: 0, stagger: 0.1, delay: 1.2, ease: 'back.out(1.7)' });
            gsap.from('.controls-panel, .player-panel', { duration: 1, y: 30, opacity: 0, stagger: 0.3, delay: 0.8, ease: 'power3.out' });
            gsap.from('.tagline', { duration: 1, y: 20, opacity: 0, delay: 0.5 });
            gsap.from('.logo', { duration: 1.5, y: 50, opacity: 0, ease: 'elastic.out(1, 0.5)' });
        });
    </script>
</body>
</html>